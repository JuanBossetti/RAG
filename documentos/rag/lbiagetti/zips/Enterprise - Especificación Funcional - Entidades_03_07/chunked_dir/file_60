Conclusiones 
 A partir del análisis de cada uno de los casos anteriores se definen las siguientes reglas: 
 • 
 Si un atributo de la entidad destino, el cual no es de categoría “Colección”, recibe como valor en la definición del desencadenante una Colección de su mismo tipo de atributo, deberá evaluar si se encuentra en una colección o si es un atributo de primer nivel de la entidad. En el primer caso, el sistema deberá inferir que debe generar “n” instancias de elementos dentro de la colección en la misma instancia de la entidad destino. En cambio, si el atributo pertenece de manera directa a la entidad, el sistema deberá generar “n” instancias de la entidad. 
 • 
 Si en la definición de la entidad destino del desencadenante se asigna una colección (la cual denominaremos colección 1) a un atributo de primer nivel que no es de categoría colección y a su vez, se asigna una colección (denominada colección 2) a un atributo interno de una colección (combinación de caso 1 y 2, por ejemplo) el sistema deberá generar “n” instancias de la entidad destino (una por cada elemento de la colección 1), y en cada una de esas instancias existirá una colección con la cantidad de elementos definida por la colección 2. Los elementos definidos por la colección 2, serán iguales para todas las instancias de la entidad destino creadas por el desencadenante, a menos que dicha colección haya sido definida a través de una función de usuario. En la siguiente imagen se puede ver un ejemplo del caso presentado. En el mismo, se generarán tantas instancias de la entidad “Asiento Contable” como “Conceptos” diferentes retorne la función de usuario “DEVOLVER COLECCIÓN DE CONCEPTOS (Tipo de asiento)”. Cada una de estas instancias, presentará una colección de 
 movimientos contables, la cual contendrá tantos “Movimientos” como productos diferentes presente la colección “Factura.Items de Factura.Item.Producto.Cuenta contable”. En este caso, cada instancia que se cree de “Asiento Contable” contará con los mismos elementos dentro de la colección “Movimientos Contables”. 
 • 
 Cuando en la entidad destino del desencadenante se requiera asignar a más de un atributo cuya categoría no es colección, otro atributo de categoría colección del mismo tipo de atributo (o bien, una expresión de usuario que retorne una colección), se deberán generar tantas instancias del desencadenante como resultados surjan del producto cartesiano de todas las colecciones asignadas (salvo que las colecciones sean las mismas). A continuación se presentan dos ejemplos en los cuales ocurre la situación descripta: 
 o 
 Primer ejemplo: en el atributo “Kardex.Producto” se asigna la colección de Productos obtenida desde los ítems del remito. Por otro lado, en el atributo “Almacenes” del Kardex se asigna la colección de Almacenes del Remito. Por lo tanto, se deberán generar tantas instancias de Kardex como resultado se obtenga del producto cartesiano de los N productos de los ítems de remito por los M almacenes de la colección de almacenes. 
 o 
 En la siguiente imagen, puede apreciarse otro ejemplo de la misma situación, en la cual las distintas colecciones que se asignas son el retorno de dos expresiones definidas por el usuario: 
 • 
 En el caso de que exista más de una expresión de asignación con la misma colección raíz de entrada, y que estas expresiones se asignen a atributos de la entidad destino del mismo nivel, NO se realizará el producto cartesiano entre en los valores de los ítems de la colección. Llamamos atributo raíz de una expresión al primer atributo de la expresión, por ejemplo en Items de Remito.Cantidad, el atributo raíz es Items de Remito. En el siguiente ejemplo se ve que hay 3 expresiones donde se encuentra la misma colección raíz. En este caso, no se realizará el producto cartesiano entre los miembros de Items de Remito (producto, almacén y cantidad). 
 Esta regla NO será válida si: 
 o 
 2 expresiones tuvieran la misma colección raíz pero se asignan a atributos de distinto nivel (dentro de una colección por ejemplo). 
 o 
 Una de las expresiones contenga más de un atributo o una expresión compleja. Por ejemplo En Producto Buscar Precio Cuando nombre = Items de Remito.Nombre. Para estos casos si se realiza el producto cartesiano 
 • 
 En el caso de que exista más de una expresión del tipo BUSCAR de asignación con el mismo donde y el mismo cuándo, y que estas expresiones se asignen a atributos de la entidad destino del mismo nivel, NO se realizará el producto cartesiano. Cuando tengo una expresión del tipo BUSCAR, donde y cuando se encuentran de la siguiente manera: 
 EN donde BUSCAR ___ CUANDO cuando 
 Entonces, por ejemplo con las siguientes expresiones, no se hará el producto cartesiano. 
 EN Cliente BUSCAR Fecha CUANDO Ciudad = ‘Rosario’ 
 EN Cliente BUSCAR Número CUANDO Ciudad = ‘Rosario’ 
 • 
 Todos los atributos que sean referencias a elementos de colección dentro de la entidad destino, y a las cuales se le asignen elementos de una colección de la entidad origen, deberán presentar el icono de agrupación activado de manera predeterminada, pudiendo el usuario modelador desactivar estas agrupaciones. Por ejemplo, en la siguiente imagen se puede ver que a los atributos “Producto” y “Almacén” de la entidad destino “Kardex” se le asignan elementos de la colección Items de Remito de la entidad origen “Remito”. Estos atributos de la colección se presentan con agrupamiento activo. Además, al atributo “Kardex.Cantidad” se le asigna el atributo “Cantidad” de la colección de Ítems de Remito, y el mismo presenta la función de agregación definida. 
 En cada instancia generada a partir de un desencadenante, se almacenará la referencia al ítem del desencadenante origen. Es decir, si desde una Factura se genera una instancia en “Movimiento de clientes” por medio de un desencadenante llamado “Generar movimiento de clientes”, en la entidad “Movimiento de clientes” se guardará un atributo con el nombre “Generar movimiento de clientes”. Para más información sobre éste atributo, (<http://innovacion:26607/EnterpriseFuncional/Analizador%20Impacto%20-%20Consistencia/Enterprise%20-%20Especificaci%C3%B3n%20Funcional%20-%20Analizador%20de%20Impacto.docx>)acceder al documento funcional de AI. El tipo de este atributo deberá será de categoría “Disponible para desarrollador”, de manera que un desarrollador lo pueda agregar al formulario si lo requiere. 
 